(define model-kind "model")

(define model-parameters {})

;; Find field by either name or id
(define (find-field* fields field)
  (or (when (contains? fields field) [(fields field) field])
      (loop (ids (keys fields))
        (cond (empty? ids)
              (raise (str "Field not found: " field))
              (= field (fields [(head ids) "name"] ""))
              [(fields (head ids)) (head ids)]
              (recur (tail ids))))))

(define (field-to-categorical source-id field-id)
  (let ([f id] (find-field* ((fetch source-id) "fields") field-id))
    (update-and-wait source-id {"fields" {id {"optype" "categorical"}}})))

;; Given a dataset and a categorical field id or name, find
;; the associated list of categories and the missing count.
(define (categories dataset-id field-id)
  (let ([f id] (find-field* ((fetch dataset-id) "fields") field-id))
    (when (not (= "categorical" (f "optype")))
      (raise (str "Field '" field-id "' is not categorical")))
    (let (cs (map head (f ["summary" "categories"] [])))
      (when (empty? cs)
        (raise (str "Field '" field-id "' does not contain any category")))
      [cs (f ["summary" "missing_count"] 0) id (f "name")])))

;; Given a parent dataset, a field and one of its categories,
;; create a new dataset containing only the instances of the parent
;; that have the given category.
(define (category-dataset origin-id field category)
  (let (fltr (flatline "(= (f {{field}}) {{category}})"))
    (create-dataset origin-id {"lisp_filter" fltr
                               "name" (str category "_dataset")})))

;; Final workflow
(define (category-models source field kind ps)
  (field-to-categorical source field)
  (let (dataset (create-and-wait-dataset source)
        [categories missings id name] (categories dataset field)
        datasets (for (category categories)
                   (category-dataset dataset field category))
        models (for (dataset datasets) (create kind dataset ps)))
    (wait* models)
    (delete* datasets)
    models))

(define models (category-models source field model-kind model-parameters))
